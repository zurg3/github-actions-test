# https://youtu.be/Yg5rpke79X4

name: GitHub-Actions-Test
env:
  APP_NAME: "GitHub Actions Test"
  PACKAGE_NAME: "github-actions-test-ver-${{ github.sha }}"

on:
  push:
    branches:
      - master

jobs:
  testing:
    runs-on: ubuntu-latest
    steps:
      - name: Print Hello Message
        run: echo "This is Testing job."

      - name: Execute some commands
        run: |
          echo "Hello Message 1"
          echo "Hello Message 2"
          echo "Hello Message 3"
          echo "Hello Message 4"
          echo "Hello Message 5"
          echo "App name: ${{ env.APP_NAME }}"

      - name: Print OS info
        run: uname -a

      - name: List current dir
        run: ls -la

      - name: Git Clone
        uses: actions/checkout@v4

      - name: List current dir
        run: ls -la

  deploy:
    runs-on: ubuntu-latest
    needs: testing
    env:
      VAR1: "This is job variable 1"
      VAR2: "This is job variable 2"
    steps:
      - name: Print Hello Message
        run: echo "This is Deploy job."

      - name: Print env variables
        run: |
          echo "Var 1 = ${{ env.VAR1 }}"
          echo "Var 2 = ${{ env.VAR2 }}"
          echo "Var 3 = $LOCAL_VAR"
        env:
          LOCAL_VAR: "This is local variable"

      - name: Print Deploy package
        run: echo "Deploy package name is ${{ env.PACKAGE_NAME }}"

  build-linux:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v4

      - name: Compile hello.cpp
        run: |
          g++ hello.cpp -o hello_cpp
          ./hello_cpp

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: hello_cpp_linux
          path: hello_cpp

  build-win:
    runs-on: windows-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v4

      - name: Compile hello.cpp
        run: |
          g++ hello.cpp -static -o hello_cpp.exe
          .\hello_cpp.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: hello_cpp_win
          path: hello_cpp.exe

  python-linux:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python packages
        run: |
          python --version
          python -m pip install --upgrade pip
          pip install wget
          pip install pyinstaller

      - name: Create binary for hello.py
        run: pyinstaller --onefile hello.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: hello_py_linux
          path: dist/hello

      - name: Create binary for calc.py
        run: pyinstaller --onefile calc.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: calc_py_linux
          path: dist/calc

  python-win:
    runs-on: windows-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python packages
        run: |
          python --version
          python -m pip install --upgrade pip
          pip install wget
          pip install pyinstaller

      - name: Create .exe for hello.py
        run: pyinstaller --onefile hello.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: hello_py_win
          path: dist\hello.exe

      - name: Create .exe for calc.py
        run: pyinstaller --onefile calc.py

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: calc_py_win
          path: dist\calc.exe

  java-linux:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v4

      - name: Set up Java SDK
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "20"
          architecture: "x64"

      - name: Compile
        run: javac MultiplicationTable.java

      - name: Test
        run: java MultiplicationTable

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: MultiplicationTable_java_linux
          path: MultiplicationTable.class

  java-win:
    runs-on: windows-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v4

      - name: Set up Java SDK
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "8"
          architecture: "x64"

      - name: Compile
        run: javac MultiplicationTable.java

      - name: Test
        run: java MultiplicationTable

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: MultiplicationTable_java_win
          path: MultiplicationTable.class

  cmake-project-linux:
    runs-on: ubuntu-22.04
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v4

      - name: Build
        run: |
          cd cmake
          mkdir build
          cd build
          cmake ..
          cmake --build . --target all

      - name: Test
        run: |
          cmake/build/./one
          cmake/build/./two
          cmake/build/./three

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cmake_project_linux
          path: |
            cmake/build/one
            cmake/build/two
            cmake/build/three

  cmake-project-win-msvc-x86:
    runs-on: windows-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Build
        run: |
          cd cmake
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A Win32
          cmake --build . --config Release --target ALL_BUILD

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cmake_project_win_msvc_x86
          path: cmake\build\Release

  cmake-project-win-msvc-x64:
    runs-on: windows-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v4

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Build
        run: |
          cd cmake
          mkdir build
          cd build
          cmake .. -G "Visual Studio 17 2022" -A x64
          cmake --build . --config Release --target ALL_BUILD

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cmake_project_win_msvc_x64
          path: cmake\build\Release

  cmake-project-win-gcc:
    runs-on: windows-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v4

      - name: Build
        run: |
          cd cmake
          mkdir build
          cd build
          cmake .. -G "MinGW Makefiles"
          cmake --build . --target all

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cmake_project_win_gcc
          path: |
            cmake\build\one.exe
            cmake\build\two.exe
            cmake\build\three.exe

  nano:
    runs-on: ubuntu-latest
    needs: [build-linux, build-win, python-linux, python-win, java-linux, java-win, cmake-project-linux, cmake-project-win-msvc-x86, cmake-project-win-msvc-x64, cmake-project-win-gcc]
    env:
      nano_version: "7.2"
    steps:
      - name: Get source code
        run: wget https://ftp.gnu.org/gnu/nano/nano-${{ env.nano_version }}.tar.gz

      - name: Extract source code
        run: tar xzf nano-${{ env.nano_version }}.tar.gz

      - name: Configure, Build & Install
        run: |
          cd nano-${{ env.nano_version }}
          sudo apt update
          sudo apt install libncursesw5-dev
          ./configure
          make
          ls -la
          sudo make install
          nano --version

  vim:
    runs-on: ubuntu-latest
    needs: [build-linux, build-win, python-linux, python-win, java-linux, java-win, cmake-project-linux, cmake-project-win-msvc-x86, cmake-project-win-msvc-x64, cmake-project-win-gcc]
    env:
      vim_version: "9.1.0160"
    steps:
      - name: Get source code
        run: wget https://github.com/vim/vim/archive/v${{ env.vim_version }}.tar.gz

      - name: Extract source code
        run: tar xzf v${{ env.vim_version }}.tar.gz

      - name: Configure, Build & Install
        run: |
          cd vim-${{ env.vim_version }}
          ./configure
          make
          ls -la
          sudo make install
          vim --version

  git:
    runs-on: ubuntu-latest
    needs: [build-linux, build-win, python-linux, python-win, java-linux, java-win, cmake-project-linux, cmake-project-win-msvc-x86, cmake-project-win-msvc-x64, cmake-project-win-gcc]
    env:
      git_version: "2.44.0"
    steps:
      - name: Get source code
        run: wget https://github.com/git/git/archive/v${{ env.git_version }}.tar.gz

      - name: Extract source code
        run: tar xzf v${{ env.git_version }}.tar.gz

      - name: Configure, Build & Install
        run: |
          cd git-${{ env.git_version }}
          sudo apt update
          sudo apt install gettext
          autoconf
          ./configure
          make
          ls -la
          sudo make install
          git --version

  electron-linux:
    runs-on: ubuntu-latest
    needs: [nano, vim, git]
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Prepare
        run: |
          git clone https://github.com/electron/electron-quick-start.git
          cd electron-quick-start
          npm install
          sudo npm install -g electron-packager

      - name: Build
        run: |
          cd electron-quick-start
          electron-packager . ElectronQuickStart --platform=linux --arch=x64

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ElectronQuickStart-linux-x64
          path: electron-quick-start/ElectronQuickStart-linux-x64

  electron-win:
    runs-on: windows-latest
    needs: [nano, vim, git]
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Prepare
        run: |
          git clone https://github.com/electron/electron-quick-start.git
          cd electron-quick-start
          npm install
          npm install -g electron-packager

      - name: Build
        run: |
          cd electron-quick-start
          electron-packager . ElectronQuickStart --platform=win32 --arch=x64

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ElectronQuickStart-win32-x64
          path: electron-quick-start\ElectronQuickStart-win32-x64
