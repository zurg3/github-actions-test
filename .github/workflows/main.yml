# https://youtu.be/Yg5rpke79X4

name: GitHub-Actions-Test
env:
  APP_NAME: "GitHub Actions Test"
  PACKAGE_NAME: "github-actions-test-ver-${{ github.sha }}"

on:
  push:
    branches:
      - master

jobs:
  testing:
    runs-on: ubuntu-latest
    steps:
      - name: Print Hello Message
        run: echo "This is Testing job."

      - name: Execute some commands
        run: |
          echo "Hello Message 1"
          echo "Hello Message 2"
          echo "Hello Message 3"
          echo "Hello Message 4"
          echo "Hello Message 5"
          echo "App name: ${{ env.APP_NAME }}"

      - name: Print OS info
        run: uname -a

      - name: List current dir
        run: ls -la

      - name: Git Clone
        uses: actions/checkout@v2

      - name: List current dir
        run: ls -la

  deploy:
    runs-on: ubuntu-latest
    needs: testing
    env:
      VAR1: "This is job variable 1"
      VAR2: "This is job variable 2"
    steps:
      - name: Print Hello Message
        run: echo "This is Deploy job."

      - name: Print env variables
        run: |
          echo "Var 1 = ${{ env.VAR1 }}"
          echo "Var 2 = ${{ env.VAR2 }}"
          echo "Var 3 = $LOCAL_VAR"
        env:
          LOCAL_VAR: "This is local variable"

      - name: Print Deploy package
        run: echo "Deploy package name is ${{ env.PACKAGE_NAME }}"

  build-linux:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v2

      - name: Create dir
        run: mkdir path_to_artifact

      - name: Compile hello.cpp
        run: |
          g++ hello.cpp -o path_to_artifact/hello_cpp
          path_to_artifact/./hello_cpp

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: hello_cpp_linux
          path: path_to_artifact

  build-win:
    runs-on: windows-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v2

      - name: Create dir
        run: mkdir path_to_artifact

      - name: Compile hello.cpp
        run: |
          g++ hello.cpp -Wall -static -static-libgcc -static-libstdc++ -o path_to_artifact\hello_cpp.exe
          cd path_to_artifact
          .\hello_cpp.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: hello_cpp_win
          path: path_to_artifact

  unix_time-linux:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Git Clone
        run: git clone https://github.com/zurg3/test.git

      - name: Compile unix_time.cpp
        run: |
          cd test
          g++ unix_time.cpp -o unix_time_cpp
          ./unix_time_cpp 20

  unix_time-win:
    runs-on: windows-latest
    needs: deploy
    steps:
      - name: Git Clone
        run: git clone https://github.com/zurg3/test.git

      - name: Compile unix_time.cpp
        run: |
          cd test
          g++ unix_time.cpp -Wall -static -static-libgcc -static-libstdc++ -o unix_time_cpp.exe
          .\unix_time_cpp.exe 20

  python-linux:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"

      - name: Install Python packages
        run: |
          python --version
          python -m pip install --upgrade pip
          pip install wget
          pip install pyinstaller

      - name: Create binary for hello.py
        run: pyinstaller --onefile hello.py

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: hello_py_linux
          path: dist

      - name: Clean up
        run: rm dist/*

      - name: Create binary for calc.py
        run: pyinstaller --onefile calc.py

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: calc_py_linux
          path: dist

      - name: Clean up
        run: rm dist/*

  python-win:
    runs-on: windows-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: "3.8"

      - name: Install Python packages
        run: |
          python --version
          python -m pip install --upgrade pip
          pip install wget
          pip install pyinstaller

      - name: Create .exe for hello.py
        run: pyinstaller --onefile hello.py

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: hello_py_win
          path: dist

      - name: Clean up
        run: del dist\*

      - name: Create .exe for calc.py
        run: pyinstaller --onefile calc.py

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: calc_py_win
          path: dist

      - name: Clean up
        run: del dist\*

  java-linux:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v2

      - name: Set up Java SDK
        uses: actions/setup-java@v1
        with:
          java-version: "14"
          architecture: "x64"

      - name: Create dir
        run: mkdir path_to_artifact

      - name: Compile
        run: javac MultiplicationTable.java

      - name: Test
        run: java MultiplicationTable

      - name: Move artifact
        run: mv MultiplicationTable.class path_to_artifact/MultiplicationTable.class

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: MultiplicationTable_java_linux
          path: path_to_artifact

  java-win:
    runs-on: windows-latest
    needs: deploy
    steps:
      - name: Git Clone
        uses: actions/checkout@v2

      - name: Set up Java SDK
        uses: actions/setup-java@v1
        with:
          java-version: "8"
          architecture: "x64"

      - name: Create dir
        run: mkdir path_to_artifact

      - name: Compile
        run: javac MultiplicationTable.java

      - name: Test
        run: java MultiplicationTable

      - name: Move artifact
        run: move MultiplicationTable.class path_to_artifact\MultiplicationTable.class

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: MultiplicationTable_java_win
          path: path_to_artifact

  nano:
    runs-on: ubuntu-latest
    needs: [build-linux, build-win, python-linux, python-win, java-linux, java-win]
    env:
      nano_version: "4.9.3"
    steps:
      - name: Get source code
        run: wget https://ftp.gnu.org/gnu/nano/nano-${{ env.nano_version }}.tar.gz

      - name: Extract source code
        run: tar xzf nano-${{ env.nano_version }}.tar.gz

      - name: Configure, Build & Install
        run: |
          cd nano-${{ env.nano_version }}
          sudo apt update
          sudo apt install libncursesw5-dev
          ./configure
          make
          ls -la
          sudo make install
          nano --version

  vim:
    runs-on: ubuntu-latest
    needs: [build-linux, build-win, python-linux, python-win, java-linux, java-win]
    env:
      vim_version: "8.2.0860"
    steps:
      - name: Get source code
        run: wget https://github.com/vim/vim/archive/v${{ env.vim_version }}.tar.gz

      - name: Extract source code
        run: tar xzf v${{ env.vim_version }}.tar.gz

      - name: Configure, Build & Install
        run: |
          cd vim-${{ env.vim_version }}
          ./configure
          make
          ls -la
          sudo make install
          vim --version

  electron-linux:
    runs-on: ubuntu-latest
    needs: [nano, vim]
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14"

      - name: Prepare
        run: |
          git clone https://github.com/electron/electron-quick-start.git
          cd electron-quick-start
          npm install
          sudo npm install -g electron-packager

      - name: Build
        run: |
          cd electron-quick-start
          electron-packager . ElectronQuickStart --platform=linux --arch=x64

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ElectronQuickStart-linux-x64
          path: electron-quick-start/ElectronQuickStart-linux-x64

  electron-win:
    runs-on: windows-latest
    needs: [nano, vim]
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14"

      - name: Prepare
        run: |
          git clone https://github.com/electron/electron-quick-start.git
          cd electron-quick-start
          npm install
          npm install -g electron-packager@electron/electron-packager

      - name: Build
        run: |
          cd electron-quick-start
          electron-packager . ElectronQuickStart --platform=win32 --arch=x64

      - name: Upload artifact
        uses: actions/upload-artifact@v1
        with:
          name: ElectronQuickStart-win32-x64
          path: electron-quick-start\ElectronQuickStart-win32-x64

  oblige:
    runs-on: ubuntu-latest
    needs: [electron-linux, electron-win]
    steps:
      - name: Get source code
        run: wget http://sourceforge.net/projects/oblige/files/Oblige/7.70/oblige-770-source.zip

      - name: Extract source code
        run: unzip oblige-770-source.zip

      - name: Build
        run: |
          cd Oblige-7.70-source
          sudo apt update
          sudo apt install libfltk1.3-dev zlib1g-dev
          make

      - name: Generate WAD
        run: |
          cd Oblige-7.70-source
          wget https://raw.githubusercontent.com/zurg3/github-actions-test/master/OBLIGE/my_config.txt
          mkdir oblige_wad
          ./Oblige --batch oblige_wad/OUTPUT.wad --load my_config.txt

      - name: Upload WAD
        uses: actions/upload-artifact@v1
        with:
          name: oblige_wad
          path: Oblige-7.70-source/oblige_wad
